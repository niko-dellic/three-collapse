import * as THREE from "three";
import type { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import { GLBTileLoader } from "../src/loaders/GLBTileLoader";
import { InstancedModelRenderer } from "../src/renderers/InstancedModelRenderer";
import { DebugGrid } from "../src/utils/DebugGrid";
import type { ModelTile3DConfig } from "../src/wfc3d";
import { type DemoUIElements } from "../src/utils/debugUI";
import { type TilesetEditorElements } from "../src/utils/TilesetEditor";
export default class Demo {
    scene: THREE.Scene;
    camera: THREE.PerspectiveCamera;
    renderer: THREE.WebGLRenderer;
    controls: OrbitControls;
    worker: Worker | null;
    glbLoader: GLBTileLoader;
    modelRenderer: InstancedModelRenderer | null;
    debugGrid: DebugGrid;
    width: number;
    height: number;
    depth: number;
    cellSize: number;
    currentSeed: number;
    isLoading: boolean;
    animate: () => void;
    ui: DemoUIElements;
    tilesetEditor: TilesetEditorElements;
    previousWidth: number;
    previousHeight: number;
    previousDepth: number;
    expansionMode: boolean;
    useWorkers: boolean;
    workerCount: number;
    tiles: ModelTile3DConfig[];
    constructor(tiles?: ModelTile3DConfig[], cellSize?: number);
    private onGridSizeChange;
    private generate;
    private shrink;
    private shrinkThenExpand;
}
//# sourceMappingURL=template.d.ts.map